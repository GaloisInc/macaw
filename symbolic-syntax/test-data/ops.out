(defun @ops ((p Pointer) (q Pointer)) Unit
   (start start:
      (let b (bv-typed-literal SizeT 42))
      (let n (pointer-make-null))
      (let d (pointer-diff p q))
      (let r (pointer-add p d))
      (let s (pointer-sub r d))
      (let e (pointer-eq s p))
      (let t (pointer-read Int le s))
      (pointer-write SizeT le s b)
      (return ())))

ops
%0
  % 4:12
  $2 = intLit(42)
  % 4:12
  $3 = integerToBV(64, $2)
  % 5:12
  $4 = extensionApp(null_ptr)
  % internal
  $5 = (ptr_sub $0 $1)
  % 6:12
  $6 = extensionApp((ptr_to_bits_64 $5))
  % internal
  $7 = extensionApp((bits_to_ptr_64 $6))
  % 7:12
  $8 = (ptr_add $0 $7)
  % 8:16
  $9 = (ptr_sub $8 $7)
  % 9:16
  $10 = (ptr_eq $9 $0)
  % internal
  $11 = (macawReadMem bvle4 $9)
  % 10:12
  $12 = extensionApp((ptr_to_bits_32 $11))
  % internal
  $13 = extensionApp((bits_to_ptr_64 $3))
  % 11:5
  $14 = (macawWriteMem bvle8 $9 $13)
  % 12:13
  $15 = emptyApp()
  % 12:5
  return $15
  % no postdom
